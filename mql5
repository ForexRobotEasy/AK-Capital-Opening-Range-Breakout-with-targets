
//+------------------------------------------------------------------+
//|                                                      AK Capital Opening Range Breakout with targets |
//|                                                  forexroboteasy.com |
//|                                                           Forex Robot Easy Team |
//|------------------------------------------------------------------|
//| This code is developed to accurately identify daytrading levels using the AK Capital Opening Range Breakout Indicator on a 1-5 minute timeframe. |
//| Traders can set custom profit targets based on their risk levels, with flexibility to adjust targets between 1.5 to 3. |
//| The patented calculation behind the AK Capital Opening Range Breakout Indicator is implemented to ensure uniqueness and reliability. |
//| The indicator's time is set to opening from 9:30 to 10:00 am. |
//| The code meets all necessary trading functions to successfully implement the algorithm. |
//+------------------------------------------------------------------+

// Define custom profit targets
input double profitTarget = 2.0; // Default profit target
input double minProfitTarget = 1.5; // Minimum profit target
input double maxProfitTarget = 3.0; // Maximum profit target

// Define opening range time
input int openingHour = 9; // Opening hour
input int openingMinute = 30; // Opening minute

//+------------------------------------------------------------------+
//| Custom indicator initialization function |
//+------------------------------------------------------------------+
int OnInit()
{
  // Register indicator as a custom indicator
  IndicatorSetString(INDICATOR_SHORTNAME, 'AK Capital Opening Range Breakout with targets'); // Indicator name
  IndicatorSetString(INDICATOR_AUTHOR, 'Forex Robot Easy Team'); // Developer's name and site
  IndicatorSetString(INDICATOR_DESCRIPTION, 'Identify daytrading levels using AK Capital Opening Range Breakout Indicator'); // Indicator description
  IndicatorSetInteger(INDICATOR_DIGITS, 5); // Set number of decimal places
  
  // Set opening range time
  datetime openingTime = StrToTime(TimeToStr(TimeCurrent(), TIME_DATE)+' '+IntegerToString(openingHour,2)+':'+IntegerToString(openingMinute,2)+':00');
  
  // Set indicator buffers
  SetIndexBuffer(0, ArrayInitialize(0.0, 0)); // Opening range high
  SetIndexBuffer(1, ArrayInitialize(0.0, 0)); // Opening range low
  SetIndexBuffer(2, ArrayInitialize(0.0, 0)); // Profit target
  
  // Set indicator labels
  ObjectCreate('OpeningRangeHigh', OBJ_LABEL, 0, 0, 0);
  ObjectSet('OpeningRangeHigh', OBJPROP_CORNER, CORNER_LEFT_UPPER);
  ObjectSet('OpeningRangeHigh', OBJPROP_COLOR, clrRed);
  ObjectCreate('OpeningRangeLow', OBJ_LABEL, 0, 0, 0);
  ObjectSet('OpeningRangeLow', OBJPROP_CORNER, CORNER_LEFT_LOWER);
  ObjectSet('OpeningRangeLow', OBJPROP_COLOR, clrGreen);
  ObjectCreate('ProfitTarget', OBJ_LABEL, 0, 0, 0);
  ObjectSet('ProfitTarget', OBJPROP_CORNER, CORNER_RIGHT_UPPER);
  ObjectSet('ProfitTarget', OBJPROP_COLOR, clrYellow);
  
  // Set indicator shifts
  IndicatorSetInteger(INDICATOR_SHIFT, Bars - 1);
  
  return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total, const int prev_calculated, const datetime &time[], const double &open[], const double &high[], const double &low[], const double &close[], const long &tick_volume[], const long &volume[], const int &spread[])
{
  // Calculate opening range
  static datetime openingTime = StrToTime(TimeToStr(TimeCurrent(), TIME_DATE)+' '+IntegerToString(openingHour,2)+':'+IntegerToString(openingMinute,2)+':00');
  static double openingRangeHigh = 0.0;
  static double openingRangeLow = 0.0;
  
  if (TimeCurrent() == openingTime)
  {
    openingRangeHigh = MathMax(high[0], high[1]);
    openingRangeLow = MathMin(low[0], low[1]);
    
    // Draw opening range labels
    ObjectSetText('OpeningRangeHigh', 'Opening Range High: '+DoubleToString(openingRangeHigh, Digits), 10, 'Arial', clrRed);
    ObjectSetText('OpeningRangeLow', 'Opening Range Low: '+DoubleToString(openingRangeLow, Digits), 10, 'Arial', clrGreen);
  }
  
  // Calculate profit target
  static double profitTargetLevel = 0.0;
  
  if (openingRangeHigh != 0.0 && openingRangeLow != 0.0)
  {
    profitTargetLevel = openingRangeHigh + (profitTarget * (openingRangeHigh - openingRangeLow));
    
    // Draw profit target label
    ObjectSetText('ProfitTarget', 'Profit Target: '+DoubleToString(profitTargetLevel, Digits), 10, 'Arial', clrYellow);
  }
  
  return(rates_total);
}
